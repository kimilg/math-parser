// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createEquation = `-- name: CreateEquation :one
INSERT INTO equations (
    value
) VALUES (
    $1
 )
RETURNING id, value, created_at, updated_at, deleted_at
`

func (q *Queries) CreateEquation(ctx context.Context, value string) (Equation, error) {
	row := q.db.QueryRow(ctx, createEquation, value)
	var i Equation
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteEquation = `-- name: DeleteEquation :exec
DELETE FROM equations
WHERE id = $1
`

func (q *Queries) DeleteEquation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEquation, id)
	return err
}

const getEquation = `-- name: GetEquation :one
SELECT id, value, created_at, updated_at, deleted_at FROM equations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEquation(ctx context.Context, id int64) (Equation, error) {
	row := q.db.QueryRow(ctx, getEquation, id)
	var i Equation
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEquationFromValue = `-- name: GetEquationFromValue :one
SELECT id, value, created_at, updated_at, deleted_at FROM equations
WHERE value = $1 LIMIT 1
`

func (q *Queries) GetEquationFromValue(ctx context.Context, value string) (Equation, error) {
	row := q.db.QueryRow(ctx, getEquationFromValue, value)
	var i Equation
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEquations = `-- name: ListEquations :many
SELECT id, value, created_at, updated_at, deleted_at FROM equations
ORDER BY id
`

func (q *Queries) ListEquations(ctx context.Context) ([]Equation, error) {
	rows, err := q.db.Query(ctx, listEquations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Equation
	for rows.Next() {
		var i Equation
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEquation = `-- name: UpdateEquation :one
UPDATE equations
set value = $2
WHERE id = $1
RETURNING id, value, created_at, updated_at, deleted_at
`

type UpdateEquationParams struct {
	ID    int64
	Value string
}

func (q *Queries) UpdateEquation(ctx context.Context, arg UpdateEquationParams) (Equation, error) {
	row := q.db.QueryRow(ctx, updateEquation, arg.ID, arg.Value)
	var i Equation
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
